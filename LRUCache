#include <unordered_map>

class LRUCache {
public:
        struct node
        {
            int value;
            node * prev;
            node * next;
            int key;
        };
    
        int count;
        int cap;
        node * head;
        node * tail;
        std::unordered_map<int, node*> map;
    
    LRUCache(int capacity) {
        cap = capacity;
        count = 0;
        head = (node *)malloc(sizeof(node));
        tail = (node *)malloc(sizeof(node));
        head->next = tail;
        head->prev = NULL;
        tail->prev = head;
        tail->next = NULL;
        head->value = 43;
        head->key = 0;
        tail->key = 0;
        tail->value = 44;
    }
    
    int get(int key) {
        if(map.count(key) == 0)
            return -1;
 
        node * curnode = map[key];
        curnode->prev->next = curnode->next;
        curnode->next->prev = curnode->prev;
        curnode->next = head->next;
        curnode->prev = head;
        head->next->prev = curnode;
        head->next = curnode;
        
        
        return curnode->value;
    }
    
    void put(int key, int value) {
        if(cap == 0)
            return;
        
       if(map.count(key) == 0 && count == cap)
       {
            node * evicted = tail->prev;
            map.erase(evicted->key);
            (evicted->prev)->next = tail;
           
            tail->prev = evicted->prev;
            free(evicted);
            node * newnode = (node *)malloc(sizeof(node));
            newnode->prev = head;
            newnode->next = head->next;
            head->next->prev = newnode;
            head->next = newnode;
            newnode->value = value;
            newnode->key = key;
            map[key] = newnode;
       }
        else if(count == cap)
        {
            node * curnode = map.at(key);
            curnode->prev->next = curnode->next;
            curnode->next->prev = curnode->prev;
            curnode->next = head->next;
            curnode->prev = head;
            head->next->prev = curnode;
            head->next = curnode;
            curnode->value = value;
        }
        else if(map.count(key) == 1)
        {
            node * curnode = map[key];
            curnode->prev->next = curnode->next;
            curnode->next->prev = curnode->prev;
            curnode->next = head->next;
            curnode->prev = head;
            head->next->prev = curnode;
            head->next = curnode;
            curnode->value = value;
        }
        else
        {
            node * newnode = (node *)malloc(sizeof(node));
            newnode->prev = head;
            newnode->next = head->next;
            newnode->next->prev = newnode;
            head->next = newnode;
            newnode->value = value;
            newnode->key = key;
            map[key] = newnode; 
            count++;
        }
        return;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
